#include<bits/stdc++.h>
using namespace std;
#define ll int
 
const ll N = 2e5 + 9;
ll B;
 
struct query {
  ll l, r, id;
  bool operator < (const query &x) const {
    if (l / B == x.l / B) {
      return r / B < x.r / B;
    }
    return l / B < x.l / B;
  }
} Q[N];

ll a[N];
ll l, r, t, st[N], en[N], cnt[N];
vector<ll> g[N];
map<int ,int> mp;
ll res = 0, ans[N];
vector<ll> d;

inline void add(ll x) {
  if(!cnt[a[d[x]]]) res++;
  cnt[a[d[x]]]++;
}
inline void del(ll x) {
  cnt[a[d[x]]]--;
  if(!cnt[a[d[x]]]) res--;
}
inline void update(ll pos, ll x) {
  if (l <= pos && pos <= r) {
    del(pos);
    a[pos] = x;
    add(pos);
  }
  else a[pos] = x;
}
void dfs(ll u, ll p){
	st[u] = t++;
	d.push_back(u);
	for(auto i : g[u]){
		if(i != p){
			dfs(i, u);
		}
	}
	en[u] = t;
}
 
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
 
  ll n;
  cin >> n;
  ll c = 0;
  for (ll i = 1; i <= n; i++) {
    cin >> a[i];
    if(!mp[a[i]]) mp[a[i]] = c, c++;
  }
  
  
  for(ll i = 1; i <= n; i++){
  	a[i] = mp[a[i]];
  }
  
  B = sqrt(n) + 1;
  for(ll i = 1; i < n; i++){
  	ll u, v;
  	cin >> u >> v;
  	
  	g[u].push_back(v);
  	g[v].push_back(u);
  }
  dfs(1, 0);
  for (ll i = 1; i <= n; i++) {
    Q[i] = {st[i], en[i] - 1, i};
  }
  sort(Q + 1, Q + n + 1);
  
  l = 1, r = 0;
  for (ll i = 1; i <= n; i++) {
    ll L = Q[i].l, R = Q[i].r;
    
    if(R < l) {
      while(l > L) add(--l);
      while(l < L) del(l++);
      while(r < R) add(++r);
      while(r > R) del(r--);
    } else {
      while(r < R) add(++r);
      while(r > R) del(r--);
      while(l > L) add(--l);
      while(l < L) del(l++);
    }
    
    ans[Q[i].id] = res;
  }
  for (ll i = 1; i <= n; i++) cout << ans[i] << ' ';
  return 0;
}
